{"ast":null,"code":"var _jsxFileName = \"/Users/nick/Documents/Code/04-Project/howler-react-experiment/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport * as howlerUtils from \"./utils/howler-utils\";\nimport sounds from \"./data/sounds\";\nimport scenarios from \"./data/scenarios\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      playing: false,\n      currentScenario: \"italianbirds\",\n      bgChannels: [],\n      randChannels: []\n    };\n\n    this.buildChannelList = channels => {\n      const _this$state = this.state,\n            currentScenario = _this$state.currentScenario,\n            bgChannels = _this$state.bgChannels,\n            randChannels = _this$state.randChannels;\n      const thisScenario = scenarios.filter(scenario => scenario.slug === currentScenario)[0];\n      const newBgChannels = [...thisScenario.bg_sounds];\n      const newRandChannels = [...thisScenario.random_sounds];\n      this.setState({\n        bgChannels: newBgChannels,\n        randChannels: newRandChannels\n      });\n    };\n\n    this.handlePlayPause = () => {\n      const playSound = howlerUtils.playSound,\n            pauseSound = howlerUtils.pauseSound;\n      const playing = this.state.playing;\n\n      if (playing) {\n        pauseSound();\n        this.setState({\n          playing: false\n        });\n      } else {\n        playSound();\n        this.setState({\n          playing: true\n        });\n      }\n    };\n\n    this.handleVolume = event => {\n      const value = event.target.value;\n      const volume = this.state.volume;\n      this.setState({\n        volume: value\n      });\n      howlerUtils.volSound(volume);\n    };\n\n    this.handlePan = event => {\n      const value = event.target.value;\n      const pan = this.state.pan;\n      this.setState({\n        pan: value\n      });\n      howlerUtils.panSound(pan);\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          volume = _this$state2.volume,\n          pan = _this$state2.pan;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handlePlayPause,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Play/Pause\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Volume\", React.createElement(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: \"1\",\n      step: \"0.01\",\n      value: volume,\n      onChange: this.handleVolume,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Pan\", React.createElement(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: \"1\",\n      step: \"0.01\",\n      value: pan,\n      onChange: this.handlePan,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nick/Documents/Code/04-Project/howler-react-experiment/src/App.js"],"names":["React","Component","howlerUtils","sounds","scenarios","App","state","playing","currentScenario","bgChannels","randChannels","buildChannelList","channels","thisScenario","filter","scenario","slug","newBgChannels","bg_sounds","newRandChannels","random_sounds","setState","handlePlayPause","playSound","pauseSound","handleVolume","event","value","target","volume","volSound","handlePan","pan","panSound","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport * as howlerUtils from \"./utils/howler-utils\";\nimport sounds from \"./data/sounds\";\nimport scenarios from \"./data/scenarios\";\n\nclass App extends Component {\n  state = {\n    playing: false,\n    currentScenario: \"italianbirds\",\n    bgChannels: [],\n    randChannels: []\n  };\n\n  buildChannelList = channels => {\n    const { currentScenario, bgChannels, randChannels } = this.state;\n    const thisScenario = scenarios.filter(\n      scenario => scenario.slug === currentScenario\n    )[0];\n    const newBgChannels = [...thisScenario.bg_sounds];\n    const newRandChannels = [...thisScenario.random_sounds];\n    this.setState({ bgChannels: newBgChannels, randChannels: newRandChannels });\n  };\n\n  handlePlayPause = () => {\n    const { playSound, pauseSound } = howlerUtils;\n    const { playing } = this.state;\n    if (playing) {\n      pauseSound();\n      this.setState({ playing: false });\n    } else {\n      playSound();\n      this.setState({ playing: true });\n    }\n  };\n\n  handleVolume = event => {\n    const { value } = event.target;\n    const { volume } = this.state;\n    this.setState({ volume: value });\n    howlerUtils.volSound(volume);\n  };\n\n  handlePan = event => {\n    const { value } = event.target;\n    const { pan } = this.state;\n    this.setState({ pan: value });\n    howlerUtils.panSound(pan);\n  };\n\n  render() {\n    const { volume, pan } = this.state;\n    return (\n      <div className=\"App\">\n        <button onClick={this.handlePlayPause}>Play/Pause</button>\n        <label>\n          Volume\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"1\"\n            step=\"0.01\"\n            value={volume}\n            onChange={this.handleVolume}\n          ></input>\n        </label>\n        <label>\n          Pan\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"1\"\n            step=\"0.01\"\n            value={pan}\n            onChange={this.handlePan}\n          ></input>\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}